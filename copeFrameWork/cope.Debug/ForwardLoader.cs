//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.4927
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace = "copeService", ConfigurationName = "IForwardPort", CallbackContract=typeof(IForwardPortCallback))]
public interface IForwardPort
{
    [System.ServiceModel.OperationContractAttribute(Action = "copeService/IForwardPort/ReceiveCommand", ReplyAction = "copeService/IForwardPort/ReceiveCommandResponse")]
    string ReceiveCommand(string command);

    [System.ServiceModel.OperationContractAttribute(Action = "copeService/IForwardPort/Ping", ReplyAction = "copeService/IForwardPort/PingResponse")]
    int Ping();

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "copeService/IForwardPort/RegisterCallbackClient")]
    void RegisterCallbackClient();

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "copeService/IForwardPort/KillCallbackClient")]
    void KillCallbackClient();

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "copeService/IForwardPort/LoadAssembly")]
    void LoadAssembly(string path, string startClass);

    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "copeService/IForwardPort/LoadAssemblyAndStartMethod")]
    void LoadAssemblyAndStartMethod(string path, string startClass, string startMethod, bool isStatic);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IForwardPortCallback
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "copeService/IForwardPort/SendMessage")]
    void SendMessage(string message);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IForwardPortChannel : IForwardPort, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public class ForwardPortClient : System.ServiceModel.DuplexClientBase<IForwardPort>, IForwardPort
{
    public ForwardPortClient(System.ServiceModel.InstanceContext callbackInstance) :
        base(callbackInstance)
    {
    }

    public ForwardPortClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
        base(callbackInstance, endpointConfigurationName)
    {
    }

    public ForwardPortClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ForwardPortClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public ForwardPortClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
        base(callbackInstance, binding, remoteAddress)
    {
    }

    public void LoadAssembly(string path, string startClass)
    {
        Channel.LoadAssembly(path, startClass);
    }

    public void LoadAssemblyAndStartMethod(string path, string startClass, string startMethod, bool isStatic = false)
    {
        Channel.LoadAssemblyAndStartMethod(path, startClass, startMethod, isStatic);
    }

    public string ReceiveCommand(string command)
    {
        return Channel.ReceiveCommand(command);
    }

    public int Ping()
    {
        return Channel.Ping();
    }

    public void RegisterCallbackClient()
    {
        Channel.RegisterCallbackClient();
    }

    public void KillCallbackClient()
    {
        Channel.KillCallbackClient();
    }
}